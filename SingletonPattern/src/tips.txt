单例模式是一种对象创建型模式，使用单例模式，可以保证为一个类只生成唯一的实例对象。即整个程序空间中，该类只存在一个实例对象。
GOF对单例对模式定义：保证一个类只有一个实例存在，同时提供能对该实例加以访问对全局方法。

通常单例模式在Java语言中，有两种构建方式：
懒汉式—线程不安全：最基础的实现方式，线程上下文单例，不需要共享给所有线程，也不需要加synchronize之类的锁，以提高性能。
懒汉式—线程安全：加上synchronize之类保证线程安全的基础上的懒汉模式，相对性能很低，大部分时间并不需要同步
饿汉方式。指全局的单例实例在类装载时构建。
双检锁式。在懒汉式基础上利用synchronize关键字和volatile关键字确保第一次创建时没有线程间竞争而产生多个实例，仅第一次创建时同步，性能相对较高

小结：“懒汉式”是在你真正用到的时候，需要调用getInstance()方法的时候，才会去创建这个单例对象；
     ”饿汉式“是不管你需不需要用到，都会去new Singleton()提前创建好这个单例对象。

优点
一、实例控制
单例模式会阻止其他对象实例化其自己的单例对象的副本，从而确保所有对象都访问唯一实例。
二、灵活性
因为类控制了实例化过程，所以类可以灵活更改实例化过程。
缺点
一、开销
虽然数量很少，但如果每次对象请求引用时都要检查是否存在类的实例，将仍然需要一些开销。可以通过使用静态初始化解决此问题。
二、可能的开发混淆
使用单例对象（尤其在类库中定义的对象）时，开发人员必须记住自己不能使用new关键字实例化对象。因为可能无法访问库源代码，因此应用程序开发人员可能会意外发现自己无法直接实例化此类。
三、对象生存期
不能解决删除单个对象的问题。在提供内存管理的语言中（例如基于.NET Framework的语言），只有单例类能够导致实例被取消分配，因为它包含对该实例的私有引用。在某些语言中（如 C++），其他类可以删除对象实例，但这样会导致单例类中出现悬浮引用。